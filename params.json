{"name":"Pinocchio","tagline":"Automate behavior testing for Puppet modules using Cucumber, Vagrant, and a little magic.","body":"```cucumber\r\nGiven a centos6 machine\r\nWhen I apply the apache module\r\nThen I should magically be able to connect to a webserver\r\n```\r\n\r\n## Why \"Behavior\" Tests?\r\n\r\nBecause this has happened to all of us:\r\n\r\n```bash\r\n# puppet agent -t\r\n...\r\nError: /Stage[main]/Apache/Service[httpd]/ensure: change from stopped to running failed: Could not start Service[httpd]: Execution of '/sbin/service httpd start' returned 1\r\n```\r\n\r\n### But I Already Have Rspec-Puppet. Won't That Catch These Kinds Of Errors?\r\n\r\nNope! Puppet doesn't care that your Apache config is listening to the same port twice in two different files, but Apache sure does and will refuse to start.\r\n\r\nTim Sharpe did the entire Puppet community a great service by bringing us `rspec-puppet`. It has helped usher in what is likely the golden age of sane configuration management. But it only covers one side of the story...\r\n\r\n## Anatomy Of A Puppet Run\r\n\r\n1. Catalog Compile\r\n  - Executed on master\r\n  - Validates syntax\r\n  - Performs hiera lookups\r\n  - Builds resource dependency graph\r\n  - Renders ERB templates\r\n2. Implementation\r\n  - Executed on agent\r\n  - checks state of each resource\r\n  - remediates if necessary\r\n  - actually runs provider code\r\n\r\n## Why Cucumber?\r\n\r\nBecause it's very readable, especially for those without a strong development background.\r\n\r\n### Isn't This Just Cucumber-Puppet? Someone Already Wrote That, Dummy\r\n\r\nNO U\r\n\r\n`cucumber-puppet`, like `rspec-puppet`, only tested the catalog compilation phase of the puppet run. With Pinocchio you are testing for the actual final results of applying the module.\r\n\r\n## Installation\r\n\r\nYou can't install pinocchio from rubygems yet, but you can still add it into your Gemfile like so:\r\n\r\n```ruby\r\ngem 'pinocchio', :git => 'http://github.com/justinclayton/pinocchio.git'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```bash\r\n$ bundle\r\n```\r\n\r\n## Usage\r\n\r\nAdd this to your module's `Rakefile`:\r\n\r\n```ruby\r\nrequire 'pinocchio/rake'\r\n```\r\n\r\nAnd this to your module's `features/support/env.rb`:\r\n\r\n```ruby\r\nrequire 'pinocchio'\r\nrequire 'pinocchio/cucumber'\r\n```\r\n\r\nIf you will be testing network connections, you will need to specify what ports to expose to your machine in your `env.rb` as well, like this:\r\n\r\n```ruby\r\nPinocchio.config do |config|\r\n  config.exposed_ports = ['80', '443']\r\nend\r\n```\r\n\r\nLook at the provided test puppet module for a complete example of usage.\r\n\r\n## Assumptions\r\n\r\nPinocchio is a stupid wooden puppet, and therefore makes many assumptions about your workflow:\r\n\r\n\r\n- He assumes you already do spec tests using the `puppetlabs_spec_helper` gem, as he relies on `.fixtures.yml` to understand your module's dependencies. This may change in the future.\r\n\r\n- He doesn't like sharing, so when he downloads and uses Vagrant boxes, they don't go in `$VAGRANT_HOME` (aka `~/.vagrant.d`), but instead in `~/.pinocchio/vagrant_home`. You can override `vagrant_home` and many other config elements inside of the `Pinocchio.config` block.\r\n\r\n- He assumes you like cucumbers. That's why he brought you all these cucumbers. He just wants you to love him!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}